var t,e,n,s=this&&this.__classPrivateFieldSet||function(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n},i=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};export default class a extends HTMLButtonElement{constructor(){super(),t.set(this,void 0),e.set(this,null),n.set(this,null),this.type="button"}connectedCallback(){const i=this.dataset.text,a=this.dataset.targetFor;if(void 0===i&&void 0===a)throw new Error("Attribute: `data-text` or `data-target-for` is not set.");if(void 0!==i&&s(this,t,i),void 0!==a){const t=document.getElementById(a);if(null===t)throw new Error(`Element: #${a} can not found.`);s(this,e,t)}const o=this.dataset.feedbackFor;if(void 0!==o){const t=document.getElementById(o);if(null===t)throw new Error(`Element: #${o} can not found.`);s(this,n,t)}this.addEventListener("click",this._clickEvent,{passive:!0})}disconnectedCallback(){this.removeEventListener("click",this._clickEvent)}async _clickEvent(){const s=void 0!==i(this,t)?i(this,t):this._getContent(i(this,e));await navigator.clipboard.writeText(s),null!==i(this,n)?i(this,n).hidden=!1:console.info("Clipboard write successfully.",s)}_getContent(t){const e=t.textContent;switch(t.tagName.toLowerCase()){case"data":case"input":case"select":case"textarea":case"output":return t.value;case"meta":return t.content;case"pre":return e}return e.trim()}}t=new WeakMap,e=new WeakMap,n=new WeakMap;
//# sourceMappingURL=ButtonClipboard.min.js.map